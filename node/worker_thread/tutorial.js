const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');

function getRandomNumber() {
    return Math.floor(Math.random()*10);
}

// isMainThread is used to determine if the current execution context is the main thread or worker thread.
if(isMainThread) {
    let threads = [];
    // Creating ten worker threads and passes arguments using workerData.
    for(let i=0;i<10;i++) {
        threads.push(new Worker(__filename, {workerData: {thread: i} }));
    }

    let list = [];
    for(let i=0;i<10;i++) {
        const thread = threads[i];
        // event listeners for each worker thread in the threads array.

        // logs any errors that occur.
        thread.on('error', err => {
            console.error(err);
        });

        // `exit` event is triggered when a worker thread terminates and it removes the terminated thread from the `threads` array.
        thread.on('exit', () => {
            console.log('A thread has been terminated.');
            threads.splice(i, 1);
            if(threads.size===0) {
                console.log('All threads are done.');
            }
        });

        // `message` event receives messages from the worker threads and pushes them into `list` array.
        thread.on('message', msg => {
            list.push(msg);
        });
    }
    console.log('10 random numbers that are generated by 10 worker threads: ', list);
} else {
    // If the current execution context is not the main thread, it means it's a worker thread.

    // You can use workerData object as parameter that is given by the main thread.
    console.log('thread: ', workerData.thread);
    // parentPort is a communication channel with parent thread.
    parentPort.postMessage(getRandomNumber());
}
